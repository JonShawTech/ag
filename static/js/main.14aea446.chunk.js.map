{"version":3,"sources":["component/Astrogram.js","App.js","serviceWorker.js","index.js"],"names":["Astrogram","props","state","title","explanation","url","mediaType","query","photos","handleChange","event","setState","target","value","handleSubmit","searchPhotos","preventDefault","this","loadDefault","newArr","console","log","toUpperCase","fetch","then","response","json","data","i","collection","items","length","push","links","className","onSubmit","type","onChange","placeholder","map","item","idx","src","href","alt","key","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+RAMqBA,G,wDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAERC,MAAQ,CACNC,MAAO,UACPC,YAAa,GACbC,IAAK,GACLC,UAAW,GACXC,MAAO,GACPC,OAAQ,IATS,EAqDnBC,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEJ,MAAOG,EAAME,OAAOC,SAtDnB,EA0DnBC,aAAe,SAACJ,GACd,EAAKK,eAELL,EAAMM,kBA7DW,E,gEAajBC,KAAKC,gB,qCAGS,IAAD,OACPC,EAAS,GACfC,QAAQC,IAAIJ,KAAKf,MAAMK,OACC,KAArBU,KAAKf,MAAMK,MACZU,KAAKN,SAAS,CAACR,MAAO,MAEtBc,KAAKN,SAAS,CAACR,MAAOc,KAAKf,MAAMK,MAAMe,gBAEzCC,MACE,wCACEN,KAAKf,MAAMK,MACX,qBAEDiB,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAKE,WAAWC,MAAMC,OAAQH,IAChDT,EAAOa,KAAKL,EAAKE,WAAWC,MAAMF,GAAGK,MAAM,IAE7C,EAAKtB,SAAS,CAAEH,OAAQW,IACxBC,QAAQC,IAAI,EAAKnB,MAAMM,a,oCAId,IAAD,OACNW,EAAS,GACfI,MAAM,wCAA0CN,KAAKf,MAAMC,MAAQ,qBAChEqB,MAAK,SAACC,GAAD,OAAcA,EAASC,UACvBF,MAAK,SAACG,GACV,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACtBT,EAAOa,KAAKL,EAAKE,WAAWC,MAAMF,GAAGK,MAAM,IAG7C,EAAKtB,SAAS,CAAEH,OAAQW,IACxBC,QAAQC,IAAI,EAAKnB,MAAMM,a,6GAmB3B,OACE,6BACE,4BAAQ0B,UAAU,UAChB,wBAAIA,UAAU,kBAAd,aAEA,wBAAIA,UAAU,eAAd,yBAGF,yBAAKA,UAAU,aACb,0BAAMC,SAAUlB,KAAKH,cACnB,0CAGE,2BACEsB,KAAK,OACLvB,MAAOI,KAAKf,MAAMK,MAClB8B,SAAUpB,KAAKR,aACf6B,YAAY,iBAMhB,4BAAQF,KAAK,UAAS,uBAAGF,UAAU,iCASvC,yBAAKA,UAAU,SACb,4BAAKjB,KAAKf,MAAMC,QAIlB,yBAAK+B,UAAU,iBACZjB,KAAKf,MAAMM,OAAO+B,KAAI,SAACC,EAAMC,GAAP,OACrB,yBAAKC,IAAKF,EAAKG,KAAMC,IAAI,QAAQC,IAAKJ,OAF1C,MAQA,gCACE,4BACG,IADH,kDAEkD,KAElD,uBAAGE,KAAM,4DAA6D/B,OAAQ,UAA9E,YAGF,6BACI,wBAAIsB,UAAU,mBAAd,sB,GA3H2BY,IAAMC,Y,MCc9BC,MAXf,WACE,OACE,yBAAKd,UAAU,OACb,gCACA,kBAAC,EAAD,SCDce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.14aea446.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nimport{ faSpaceShuttle} from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nexport default class Astrogram extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  state = {\r\n    title: \"Planets\",\r\n    explanation: \"\",\r\n    url: \"\",\r\n    mediaType: \"\",\r\n    query: \"\",\r\n    photos: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.loadDefault();\r\n  }\r\n\r\n  searchPhotos() {\r\n    const newArr = [];\r\n    console.log(this.state.query)\r\n    if(this.state.query === \"\")\r\n      this.setState({title: \"?\"})\r\n    else\r\n      this.setState({title: this.state.query.toUpperCase()})\r\n\r\n    fetch(\r\n      \"https://images-api.nasa.gov/search?q=\" +\r\n        this.state.query +\r\n        \"&media_type=image\"\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        for (let i = 0; i < data.collection.items.length; i++) {\r\n          newArr.push(data.collection.items[i].links[0]);\r\n        }\r\n        this.setState({ photos: newArr });\r\n        console.log(this.state.photos);\r\n      });\r\n  }\r\n\r\n  loadDefault() {\r\n    const newArr = [];\r\n    fetch(\"https://images-api.nasa.gov/search?q=\" + this.state.title + \"&media_type=image\")\r\n      .then((response) => response.json())\r\n           .then((data) => {\r\n        for (let i = 0; i < 30; i++) {\r\n          newArr.push(data.collection.items[i].links[0]);\r\n\r\n                }\r\n        this.setState({ photos: newArr });\r\n        console.log(this.state.photos);\r\n      });\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ query: event.target.value });\r\n\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    this.searchPhotos();\r\n \r\n    event.preventDefault();\r\n  };\r\n  handleVideo() {}\r\n\r\n  handleImage() {}\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <header className=\"banner\">\r\n          <h1 className=\"alignleft logo\">ASTROGRAM</h1>\r\n\r\n          <h1 className=\"aligncenter\">Discover the Cosmos!</h1>\r\n        </header>\r\n\r\n        <div className=\"searchbox\">\r\n          <form onSubmit={this.handleSubmit}>\r\n            <label>\r\n              Discover\r\n            \r\n              <input\r\n                type=\"text\"\r\n                value={this.state.query}\r\n                onChange={this.handleChange}\r\n                placeholder=\"Discover...\"\r\n                \r\n              />\r\n              \r\n            </label>\r\n            \r\n            <button type=\"submit\"><i className=\"fa fa-space-shuttle fa-2x\"></i></button>\r\n          \r\n           \r\n            \r\n           \r\n          </form>\r\n          \r\n        </div>\r\n\r\n        <div className=\"title\">\r\n          <h1>{this.state.title}</h1>\r\n     \r\n        </div>\r\n\r\n        <div className=\"searchResults\">\r\n          {this.state.photos.map((item, idx) => (\r\n            <img src={item.href} alt=\"image\" key={idx}></img>\r\n          ))}\r\n          );\r\n        </div>\r\n\r\n \r\n        <footer>\r\n          <h2>\r\n            {\" \"}\r\n            Image Source - NASA Image and Video Library API{\" \"}\r\n          </h2>\r\n          <a href={\"https://images.nasa.gov/docs/images.nasa.gov_api_docs.pdf\"} target={\"_blank\"}>\r\n            Nasa API\r\n          </a>\r\n        <br></br>\r\n            <h2 className=\"fa fa-copyright\"> JonShawTech</h2>\r\n\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\n\nimport './App.css';\nimport Astrogram from './component/Astrogram'\nimport '../src/component/css/font-awesome.min.css'\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n      <Astrogram></Astrogram>\n     \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}